#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Jackrabit AI
# 2024-2025 Copyright © Robert APM Darin
# All rights reserved unconditionally.

# This Python script is designed to interact with an artificial intelligence
# (AI) system, allowing users to send instructions and data to the AI and
# receive responses. The script begins by setting up the necessary tools and
# libraries it needs to function, including modules for handling files,
# managing system operations, and working with JSON data. It also imports
# custom functions from other files, which are organized into categories like
# decorators, core functions, file handling, and AI-specific operations.

# The script defines two main functions: `CheckArgs` and `main`. The
# `CheckArgs` function is a helper tool that checks if a given argument is
# present in a list of options, making it easier to process command-line
# inputs. It converts both the argument and the list items to lowercase to
# ensure the comparison is case-insensitive.

# The `main` function is where the core logic resides. It starts by copying the
# command-line arguments provided by the user. The script then sets default
# values for memory management options, such as whether to reset or save
# memory, and whether to operate in isolation without memory. It checks for
# specific command-line flags (`-isolation`, `-reset`, `-nomemory`) to adjust
# these settings accordingly. If a flag is found, it is removed from the
# argument list to keep things tidy.

# Next, the script verifies that the user has provided the necessary
# information: an AI engine, a model, the maximum number of tokens, a persona,
# and instructions (referred to as "role"). If any of these are missing, it
# informs the user and exits. The role can be provided directly or as a file
# path prefixed with `@`. If it’s a file, the script reads its contents,
# ensuring it handles line breaks and quotes properly.

# The script then checks if there is any input data provided via standard input
# (STDIN). If so, it reads and processes this data similarly to the role
# instructions. It initializes an AI agent using the provided engine, model,
# token limit, persona, and memory settings. The agent is then used to generate
# a response based on the combined role instructions and input data. Finally,
# the script prints the AI's response to the user.

import sys
sys.path.append('/home/JackrabbitAI/Library')
import os
import select
import copy
import json

import DecoratorFunctions as DF
import CoreFunctions as CF
import FileFunctions as FF
import AIFunctions as AI

@DF.function_trapper(False)
def CheckArgs(arg,inlist):
    arg=arg.lower()

    for item in inlist:
        if arg==item.lower():
            return True
    return False

@DF.function_trapper
def main():
    args=sys.argv.copy()

    ResetMemory=False
    SaveMemory=True
    NoMemory=False
    maxresp=0

    if CheckArgs('-maxrespsize',args):
        idx=args.index('-maxrespsize')
        args.remove('-maxrespsize')
        if idx < len(args):
            maxresp=int(args[idx])  # Get max characters
            args.pop(idx)
    if CheckArgs('-isolation',args):
        NoMemory=True
        args.remove('-isolation')
    if CheckArgs('-reset',args):
        ResetMemory=True
        args.remove('-reset')
    if CheckArgs('-nomemory',args):
        SaveMemory=False
        args.remove('-nomemory')

    if len(args)>5:
        engine=args[1]
        model=args[2]
        mt=int(args[3])
        persona=args[4]
        role=args[5]
    else:
        print("A provider, model, Maximum number of tokens for Engine, persona and intructions must be supplied.")
        sys.exit(0)

    # The role is the instruction, analyze, evaluate... so.
    # The input is the data we what the instructions applied to.

    if role[0]=='@':
        if os.path.exists(role[1:]):
            role=FF.ReadFile(role[1:].strip()).replace('\n','\\n').replace('"',"'")
        else:
            print("Role file not found")
            sys.exit(0)

    input=''
    if CF.IsSTDIN():
        input=sys.stdin.read().replace('\n','\\n').replace('"',"'")

    agent=AI.Agent(engine=engine,model=model,maxtokens=mt,persona=persona,reset=ResetMemory,save=SaveMemory,isolation=NoMemory,maxrespsize=maxresp)

    # Get the response from the AI

    response=agent.Response(role+'\n\n'+input)
    print(response)

if __name__=='__main__':
    main()
